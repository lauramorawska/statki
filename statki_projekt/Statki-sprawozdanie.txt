"Statki" - projekt Laury Morawskiej i Zuzanny Bosak



Na początku kodu definiowany jest rozmiar planszy, liczba statków w grze, stałe oznaczające puste pole, statek, trafienie,  chybienie oraz stała informująca, czy statki na planszy mają być widoczne (0 - niewidoczne, 1 - widoczne). Następnie określa strukturę, która reprezentuje statek w grze, zawiera pola jego współrzędnych, rozmiar, informacje czy jest pionowy(1), czy poziomy(0), flagę informującą czy statek został zatopiony(1) czy nie(0) i liczbę niezatopionych masztów statku (w przypadku wielomasztowców). Kolejna struktura Game określa stan gry w statki (plansze do gry i tablicę statków w grze). Kolumnom planszy przypisywane są wartości od A do J, a wierszom 1 do 10. Są też pętle "for" iterujące po kolejnych kolumnach i wierszach tablicy. Kolejna funkcja sprawdza warunek, czy statki na planszy mają być niewidoczne (wartość SHIPS_VISIBLE równa 0) i czy w danym polu planszy znajduje się statek (SHIP). Jeśli tak, wypisuje puste pole (EMPTY) zamiast statku. Displayboard zapewnia czytelną formę. Funkcja loadShipData dokonuje analizy łańcucha znaków line i przypisuje poszczególne wartości do pól struktury ship, które reprezentują dane dotyczące statku, takie jak współrzędne, rozmiar oraz orientację. Program zczytuje dane 5. pierwszych rozstawień z pliku Plansze.txt. Oblicza liczbę linii do pominięcia, zależnie od numeru planszy. Każda plansza składa się z 10 linii w pliku. Pętla while wykonuje się dopóki udaje się wczytać kolejną linię z pliku i nie przekroczono jeszcze liczby statków NUM_SHIPS. Każda wczytana linia reprezentuje dane statku. Funckja randomplacement losowo rozmieszcza statki, kiedy skończą się ustawienia z pliku. 

CheckHit(Game* game, int x, int y): sprawdza, czy dane pole (x, y) na planszy jest trafione. Iteruje przez wszystkie statki na planszy i wywołuje funkcję isHit dla każdego z nich. Aktualizuje liczbę żywych masztów statku i sprawdza, czy statek został zatopiony. Zwraca 2, jeśli statek został zatopiony, 1, jeśli statek został trafiony, a 0, jeśli pole jest nie trafione.

isGameOver(Game* game): Sprawdza, czy gra się zakończyła (czy wszystkie statki zostały zatopione). Iteruje przez wszystkie statki na planszy i sprawdza, czy którykolwiek z nich nie jest zatopiony. Zwraca 1, jeśli gra się zakończyła, a 0 w przeciwnym przypadku.

play(Game* game): Rozpoczyna grę, wyświetlając planszę i instrukcje dla gracza. Gracz wprowadza pole, które chce zaatakować. Wywołuje funkcję checkHit i aktualizuje planszę w zależności od wyniku ataku. Kontynuuje grę, dopóki gra się nie zakończy.

Funkcja główna main():
Inicjalizuje generator liczb pseudolosowych.
Tworzy strukturę Game.
W pętli głównej, dopóki gracz chce kontynuować grę, inicjalizuje planszę, losuje statki lub wczytuje planszę z pliku. Wywołuje funkcję play dla każdej planszy.
Po zakończeniu gry, wyświetla gratulacje i czeka na dowolny przycisk, aby kontynuować.
Cały projekt napisałyśmy wspólnie.



